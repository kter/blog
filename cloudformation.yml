# Run in the us-west-1 (for ACM)
AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Static contents distribution using S3 and CloudFront.
Parameters:
  StgDomain:
    Default: tomohiko.io
    Type: String
  PrdDomain:
    Default: tomohiko.io
    Type: String
  PrdHostname:
    Default: blog.tomohiko.io
    Type: String
  StgHostname:
    Default: stg-blog.tomohiko.io
    Type: String
Resources:
  StgBlogBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - "GET"
              - "HEAD"
  PrdBlogBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - "GET"
              - "HEAD"

  StgBlogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StgBlogBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${StgBlogBucket}/*
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
  PrdBlogAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PrdBlogBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${PrdBlogBucket}/*
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
 
  StgBlogDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: !Ref StgCertificate
          SslSupportMethod: sni-only
        Aliases:
          - !Ref StgHostname
        Origins:
        - Id: S3Origin
          DomainName: !GetAtt StgBlogBucket.DomainName
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        DefaultRootObject: index.html
        Comment: !Sub ${AWS::StackName} distribution
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Headers:
              - "Origin"
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref StgIndexLambdaFunction.Version
  PrdBlogDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: !Ref PrdCertificate
          SslSupportMethod: sni-only
        Aliases:
          - !Ref PrdHostname
        Origins:
        - Id: S3Origin
          DomainName: !GetAtt PrdBlogBucket.DomainName
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        DefaultRootObject: index.html
        Comment: !Sub ${AWS::StackName} distribution
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Headers:
              - "Origin"
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref PrdIndexLambdaFunction.Version

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  StgDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join
        - ''
        - - !Ref StgDomain
          - '.'
      Name: !Ref StgHostname
      Type: A
      AliasTarget:
        DNSName: !GetAtt StgBlogDistribution.DomainName
        # CloudFormation縺ｯ豎ｺ繧∵遠縺｡
        HostedZoneId: Z2FDTNDATAQYW2
  PrdDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join
        - ''
        - - !Ref PrdDomain
          - '.'
      Name: !Ref PrdHostname
      AliasTarget:
        DNSName: !GetAtt PrdBlogDistribution.DomainName
        # CloudFormation縺ｯ豎ｺ繧∵遠縺｡
        HostedZoneId: Z2FDTNDATAQYW2
      Type: A
  StgCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref StgHostname
      DomainValidationOptions:
        - DomainName: !Ref StgHostname
          ValidationDomain: !Ref StgDomain
      ValidationMethod: DNS
  PrdCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref PrdHostname
      DomainValidationOptions:
        - DomainName: !Ref PrdHostname
          ValidationDomain: !Ref PrdDomain
      ValidationMethod: DNS
  StgIndexLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: StgIndexLambdaRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  PrdIndexLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PrdIndexLambdaRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  StgIndexLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: StgIndexLambdaFunction
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt StgIndexLambdaRole.Arn
      AutoPublishAlias: stg
      InlineCode: |
        'use strict';
        exports.handler = (event, context, callback) => {
             
            // Extract the request from the CloudFront event that is sent to Lambda@Edge 
            var request = event.Records[0].cf.request;
         
            // Extract the URI from the request
            var olduri = request.uri;
         
            // Match any '/' that occurs at the end of a URI. Replace it with a default index
            var newuri = olduri.replace(/\/$/, '\/index.html');
             
            // Log the URI as received by CloudFront and the new URI to be used to fetch from origin
            console.log("Old URI: " + olduri);
            console.log("New URI: " + newuri);
             
            // Replace the received URI with the URI that includes the index page
            request.uri = newuri;
             
            // Return to CloudFront
            return callback(null, request);
         
        };

  PrdIndexLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PrdIndexLambdaFunction
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt PrdIndexLambdaRole.Arn
      AutoPublishAlias: prd
      InlineCode: |
        'use strict';
        exports.handler = (event, context, callback) => {
             
            // Extract the request from the CloudFront event that is sent to Lambda@Edge 
            var request = event.Records[0].cf.request;
         
            // Extract the URI from the request
            var olduri = request.uri;
         
            // Match any '/' that occurs at the end of a URI. Replace it with a default index
            var newuri = olduri.replace(/\/$/, '\/index.html');
             
            // Log the URI as received by CloudFront and the new URI to be used to fetch from origin
            console.log("Old URI: " + olduri);
            console.log("New URI: " + newuri);
             
            // Replace the received URI with the URI that includes the index page
            request.uri = newuri;
             
            // Return to CloudFront
            return callback(null, request);
         
        };

  StgIndexLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - StgIndexLambdaFunction
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${StgIndexLambdaFunction}"

  PrdIndexLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - PrdIndexLambdaFunction
    Properties:
      RetentionInDays: 1
      LogGroupName: !Sub "/aws/lambda/${PrdIndexLambdaFunction}"
