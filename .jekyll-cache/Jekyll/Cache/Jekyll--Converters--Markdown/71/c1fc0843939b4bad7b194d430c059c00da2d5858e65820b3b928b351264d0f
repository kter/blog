I"5+<p>内容の正当性は保証できません。こういう雰囲気でした。</p>

<p>スライドとか公開されたら更新します。</p>

<h2 id="概要">概要</h2>

<p>Kubernetes Meetup Tokyo #10
日時: 2018年3月8日19時から
URL: https://k8sjp.connpass.com/event/76816/</p>

<h2 id="open-service-broker-apiとkubernetes-service-catalog">Open Service Broker APIとKubernetes Service Catalog</h2>

<p>by Toshiaki Maki (@making) (Pivotal)</p>

<p>データベースをどこにだれが作成していますか？</p>

<p>よくある例: 開発者がDBが必要な時にDBAに依頼 (DB作成、ユーザ作成)。</p>

<p>Service Brokerを使えば、DBの作成・構築・設定まで自動で行える。</p>

<p>Service Brokerを使うにはOpen Service Broker APIを使う。
これはもともとはCloud Foundryのサービスだった。</p>

<p>KubernetesではService Catalogを経由してService Brokerを使う。</p>

<p>Service Brokerによって作成される機密情報はSecretに入れてくれる・</p>

<p>helmでインストールできる。</p>

<p>ブローカーが構築済みであれば、開発者は下記手順を踏むことでリソース(DB等)を用意できる。</p>

<ol>
  <li>ServiceInstance作成 -&gt; リソース（DB等）が作成される</li>
  <li>ServiceBinding作成 -&gt; パスワード等がシークレットにセットされる</li>
</ol>

<h2 id="kubernetesセキュリティベストプラクティス">Kubernetesセキュリティベストプラクティス</h2>

<p>by Ian Lewis (Google)</p>

<p>Guestbookアプリを例にベストプラクティスを紹介。</p>

<ul>
  <li>フロントはHTML/CSS/JS</li>
  <li>メッセージが保存・閲覧できる</li>
  <li>NGワード検出機能がある</li>
  <li>よくあるマイクロサービス</li>
</ul>

<h3 id="kubernetes-api-serverについて">Kubernetes API Serverについて</h3>

<h4 id="シナリオ-フロントエンドpodからトークン取得apiサーバを攻撃シークレットを取得しさらに攻撃">シナリオ: フロントエンドPodからトークン取得、APIサーバを攻撃、シークレットを取得しさらに攻撃</h4>

<p>Podにはトークンがマウントされているので、Podに侵入されるとトークンが抜かれるおそれがある。
トークンを使ってAPIサーバにアクセスすればシークレット（パスワード等)が抜かれる。</p>

<h4 id="改善策1-rbacを使おう">改善策1: RBACを使おう</h4>

<p>例えばWebサーバはAPIサーバにアクセスする必要が無いので、アクセス出来ないようRBACを設定する。
GKEだとIAMと連携でき、管理が楽。</p>

<h4 id="改善策2-apiサーバにファイアウォールを設定しよう">改善策2: APIサーバにファイアウォールを設定しよう</h4>

<p>APIサーバへのアクセスをIPアドレスに制限
<code class="highlighter-rouge">gcloud container clusters create --enable-master-authorized-networks --master-authorized-networks=...</code>
https://cloud.google.com/sdk/gcloud/reference/container/clusters/create</p>

<h4 id="改善策3-ネットワークポリシーを設定しよう">改善策3: ネットワークポリシーを設定しよう</h4>

<p>データベースへのアクセスを必要なPodに制限したりする。
networkpolicyのpodSelectorを使う。iptablesが設定される。</p>

<h3 id="ホストについて">ホストについて</h3>

<h4 id="シナリオ-コンテナを突破されホスト上で色々される">シナリオ: コンテナを突破され、ホスト上で色々される。</h4>

<p>Podはサンドボックスで実行されるのでrootで動いていても通常問題ないが、コンテナを突破されるとホストにrootで入られてしまう。</p>

<h4 id="改善策1-non-rootで実行">改善策1: non-rootで実行</h4>

<p>podのrunAsUserを使う。</p>

<h4 id="改善策2-読み込み専用ファイルシステム">改善策2: 読み込み専用ファイルシステム</h4>

<p>podのreadOnlyRootFilesystemを使う。</p>

<h4 id="改善策3-no_new_privs">改善策3: no_new_privs</h4>

<p>podのallowPrivilegeEscalationを使う。
コンテナを実行する時、フォークする時自分以上の権限を与えない。</p>

<h4 id="その他改善策">その他改善策:</h4>

<p>seccomp, AppArmor, SELinuxを使う。または組み合わせる。</p>

<p>おすすめはruntimeのdefaultを使う。</p>

<h4 id="その他改善策2-kubeletの権限を制限する">その他改善策2: kubeletの権限を制限する</h4>

<p>できるだけkubeletに必要な権限だけ与える。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--authorization-node=RBAC,Node
--admission-control=...,NodeRestriction
</code></pre></div></div>

<p>kubeletの証明書をローテーションする
<code class="highlighter-rouge">kublet... --rotate-certificates</code></p>

<p>短い期間でローテーションすれば盗まれても有効期間が限られる。</p>

<h3 id="unsecured-pods">Unsecured Pods</h3>

<h4 id="シナリオ-同じクラスタ内にセキュリティが甘いpodがある場合があるそこから色々されてしまう">シナリオ: 同じクラスタ内にセキュリティが甘いPodがある場合がある。そこから色々されてしまう。</h4>

<h4 id="改善策1-podsecuritypolicyを使う">改善策1: PodSecurityPolicyを使う</h4>

<h3 id="トラフィック傍受">トラフィック傍受</h3>

<h4 id="シナリオ-ネットワークトラフィクを傍受されサービス拒否攻撃等をされる">シナリオ: ネットワークトラフィクを傍受され、サービス拒否攻撃等をされる。</h4>

<h4 id="改善策1-istioを使う">改善策1: istioを使う</h4>

<ul>
  <li>サービス間のプロキシ</li>
  <li>暗号化</li>
  <li>証明書の自動更新</li>
  <li>ポリシーの集中管理</li>
</ul>

<h2 id="debugging-applications-in-kubernetes">Debugging Applications in Kubernetes</h2>

<p>by Takashi Kusumi (Z Lab)</p>

<h3 id="問題点">問題点</h3>

<ul>
  <li>PodやServiceにクラスタ外からアクセスできない（負荷試験など）</li>
  <li>コンテナにデバッグツールがはいってない（tcpdumpとか)</li>
</ul>

<h3 id="kubectlでの基本">kubectlでの基本</h3>

<p>使えるサブコマンド</p>

<ul>
  <li>run
    <ul>
      <li>-itでインタラクティブに操作できる</li>
      <li>クラスタ内からPodやServiceにアクセスしたい時に最適</li>
      <li>–rmと–restart=Neverをつけよう</li>
      <li>–serviceaccountオプションを使うとServiceAccount権限周りのデバッグに便利。この時googlのhyperkubeイメージを使うと便利。</li>
      <li>–overridesオプションを使うと、JSONの上書きができる。runでは設定できないフィールドも設定できる。</li>
    </ul>
  </li>
  <li>logs
    <ul>
      <li>–sinceで時間を指定できる</li>
      <li>–timestampでタイムスタンプを表示できる</li>
      <li>wercker/sternというツールを使うと複数のログを一度に見れて便利</li>
    </ul>
  </li>
  <li>exec
    <ul>
      <li>コンテナ内で任意のコマンドを実行</li>
    </ul>
  </li>
  <li>port-forward
    <ul>
      <li>ポートフォワード</li>
      <li>ローカルにListenしてるものにも使える</li>
    </ul>
  </li>
  <li>cp</li>
  <li>top
    <ul>
      <li>ノードとPodのCPU/メモリ使用率がわかる</li>
    </ul>
  </li>
</ul>

<h3 id="podとlinux名前空間">PodとLinux名前空間</h3>

<p>Podで共有されるのは</p>

<ul>
  <li>IPC
    <ul>
      <li>シグナルとか送れる</li>
      <li>pauseというコンテナが共有する舐め空間を保持している</li>
      <li>scratchのイメージだとシェル入ってない
        <ul>
          <li>/proc/[pid]/rootでそのPIDがマウントしているルートがみれる</li>
          <li>kubectl get podsしてノードを確認</li>
          <li>–overridesでdockerを起動</li>
          <li>docker run –pidを使う</li>
          <li></li>
          <li>マウントしているディレクトリを覗ける</li>
        </ul>
      </li>
      <li>scratch-debuggerツールを使う</li>
    </ul>
  </li>
  <li>Network</li>
</ul>

<h3 id="今後使える新機能">今後使える新機能</h3>

<p>Debug Containers
kubectl debugでデバッグコンテナが使える</p>

<h2 id="lt-入門kubernetesの紹介">LT 『入門Kubernetes』の紹介</h2>

<p>by @dblmkt</p>

<p>自身が翻訳した入門Kubernetesの書籍の紹介。
トピックとしては1.9までの情報を追加している。</p>

<h2 id="lt-猫でもわかる-pod-preemption">LT 猫でもわかる Pod Preemption</h2>
<p>by @y_taka_23</p>

<p>Podをノードに振り分ける時、キャパシティ不足になった。</p>

<ul>
  <li>Priorityを高いものを配置する時、低いものを落として高いものを配置する</li>
</ul>

<p>意義について　</p>

<ul>
  <li>今までは積極的にPodを追い出す方法がなかった。</li>
  <li>ノードがスケールしない環境がある。</li>
  <li>ノードのスケールには時間がかかる</li>
  <li>コストが予測可能になる</li>
</ul>

<p>仕組み</p>

<ul>
  <li>配置しようとするPodのプライオリティより低い物を選ぶ</li>
  <li>Nodeに順位付けして配置</li>
</ul>

<p>ただしAffinityの指定が問題になるので、注意する。</p>

<h2 id="lt-amazon-container-services">LT Amazon Container Services</h2>
<p>by @riywo</p>

<p>Amazon Container Servicesの信条</p>

<ol>
  <li>エンタープライズのワークロードを動かす</li>
  <li>UpstreamのK8s</li>
  <li>AWSサービスとの連携</li>
  <li>コントリビュート</li>
</ol>

<p>他AWSサービスと連携できる。</p>

<p>例えば</p>

<ul>
  <li>kubectlのクレデンシャルにIAMが使える</li>
  <li>EFSをPersistentVolumeで使える</li>
  <li>IngressでALBで使える。Route53連携もできる。</li>
</ul>

<h2 id="lt-other-ingress-voyager">LT other ingress voyager</h2>
<p>by @gavinzhm</p>

<p>voyagerはAppCodeが開発しているIngress</p>

<ul>
  <li>Ingressが一つで済む</li>
  <li>Lets Encryptが使いやすい</li>
  <li>ワイルドカード証明書対応</li>
  <li>ネームスペース超えができる</li>
  <li>ドキュメントクオリティーが高い</li>
  <li>issue対応が早い (5分でレスポンスが帰ってきたことも)</li>
  <li>…等</li>
</ul>

<h2 id="lt-dockerでhelmを使おう">LT DockerでHelmを使おう</h2>
<p>by @ShoutaYoshikai</p>

<p>ローカル / 開発でHelmを使うと色々便利
しかしhelmでは設定できない項目があったりする。</p>

<p>helmみんなも使っていこうぜ。</p>

:ET