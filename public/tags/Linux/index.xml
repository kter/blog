<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on ことえりブログ</title>
    <link>/tags/Linux/</link>
    <description>Recent content in Linux on ことえりブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Jun 2019 12:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/Linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UseKeychainが設定されているMacのssh configをLinuxで使い回す</title>
      <link>/post/2019-06-08-UseKeychain%E3%81%8C%E8%A8%AD%E5%AE%9A%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8BMac%E3%81%AEssh-config%E3%82%92Linux%E3%81%A7%E4%BD%BF%E3%81%84%E5%9B%9E%E3%81%99/</link>
      <pubDate>Sat, 08 Jun 2019 12:00:00 +0000</pubDate>
      
      <guid>/post/2019-06-08-UseKeychain%E3%81%8C%E8%A8%AD%E5%AE%9A%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8BMac%E3%81%AEssh-config%E3%82%92Linux%E3%81%A7%E4%BD%BF%E3%81%84%E5%9B%9E%E3%81%99/</guid>
      <description>課題 Dockerコンテナ内でMacのSSH設定を引き継ごうと思い、ボリュームマウントで対応したものの、Macでしか使えないUseKeychainが邪魔をしてエラーとなってしまう。
結論 IgnoreUnknownオプションを使う。 具体的には下記のようにする。
IgnoreUnknown UseKeychain UseKeychain yes 参考 Technical Note TN2449: OpenSSH updates in macOS 10.12.2</description>
    </item>
    
    <item>
      <title>自身のインスタンス名を取得するワンライナー</title>
      <link>/post/2018-06-27-%E8%87%AA%E8%BA%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%90%8D%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%AF%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%8A%E3%83%BC/</link>
      <pubDate>Wed, 27 Jun 2018 01:13:00 +0000</pubDate>
      
      <guid>/post/2018-06-27-%E8%87%AA%E8%BA%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%90%8D%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%AF%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%8A%E3%83%BC/</guid>
      <description>急にインスタンス名を取得したくなった時などにどうぞ。 ※EC2のDescribeInstances権限が必要です。
aws ec2 describe-instances \  --instance-ids `/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id` \  --query &amp;#39;Reservations[].Instances[].[Tags[?Key==`Name`].Value]&amp;#39; \  --output text 変数に入れる時はこんな感じで
INSTANCE_NAME=$(aws ec2 describe-instances \  --instance-ids `/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id` \  --query &amp;#39;Reservations[].Instances[].[Tags[?Key==`Name`].Value]&amp;#39; \  --output text) コピペ用
aws ec2 describe-instances --instance-ids `/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id` --query &amp;#39;Reservations[].Instances[].[Tags[?Key==`Name`].Value]&amp;#39; --output text </description>
    </item>
    
    <item>
      <title>mktmp, pushd, popdの使い方</title>
      <link>/post/2018-04-30-mktmp-popd-pushd%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</link>
      <pubDate>Mon, 30 Apr 2018 16:36:00 +0000</pubDate>
      
      <guid>/post/2018-04-30-mktmp-popd-pushd%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</guid>
      <description>mktmp, pushd, popdはセットで使われることが多いと思います。 シェルスクリプト内で、一時ディレクトリを作成してそこにカレントディレクトリを変更し、また以前のカレントディレクトリに戻るといったときに使われます。
# (処理) # /tmp以下に一時ディレクトリを作成し、TMPDIR変数にパスを格納 TMPDIR=$(mktemp -d --tmpdir=/tmp) # 一時ディレクトリに移動 pushd $TMPDIR &amp;gt; /dev/null # (処理) # 元いたディレクトリに戻る popd &amp;gt; /dev/null # (処理) </description>
    </item>
    
    <item>
      <title>agettyがCPU100%に張り付いたときの対応</title>
      <link>/post/2018-04-30-agetty%E3%81%8CCPU100%E3%81%AB%E5%BC%B5%E3%82%8A%E4%BB%98%E3%81%84%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%BF%9C/</link>
      <pubDate>Mon, 30 Apr 2018 14:11:00 +0000</pubDate>
      
      <guid>/post/2018-04-30-agetty%E3%81%8CCPU100%E3%81%AB%E5%BC%B5%E3%82%8A%E4%BB%98%E3%81%84%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%BF%9C/</guid>
      <description>特に起動スクリプトがあるわけではないので、下記コマンドを使って再起動しました。
$ sudo initctl list rc stop/waiting tty (/dev/tty3) start/running, process 2914 tty (/dev/tty2) start/running, process 2911 tty (/dev/tty1) start/running, process 2907 tty (/dev/tty6) start/running, process 2921 tty (/dev/tty5) start/running, process 2918 tty (/dev/tty4) start/running, process 2916 update-motd stop/waiting plymouth-shutdown stop/waiting control-alt-delete stop/waiting rcS-emergency stop/waiting kexec-disable stop/waiting quit-plymouth stop/waiting rcS stop/waiting prefdm stop/waiting init-system-dbus stop/waiting print-image-id stop/waiting elastic-network-interfaces stop/waiting splash-manager stop/waiting start-ttys stop/waiting amazon-ssm-agent start/running, process 17313 rcS-sulogin stop/waiting serial (ttyS0) start/running, process 2906 $ sudo initctl status serial DEV=ttyS0 serial (ttyS0) start/running, process 2906 $ sudo initctl restart serial DEV=ttyS0 serial (ttyS0) start/running, process 5688 </description>
    </item>
    
    <item>
      <title>Mailuで簡単にWebUI付きのメールサーバを立てる</title>
      <link>/post/2018-02-06-Mailu%E3%81%A7%E7%B0%A1%E5%8D%98%E3%81%ABWebUI%E4%BB%98%E3%81%8D%E3%81%AE%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E7%AB%8B%E3%81%A6%E3%82%8B/</link>
      <pubDate>Tue, 06 Feb 2018 13:15:00 +0000</pubDate>
      
      <guid>/post/2018-02-06-Mailu%E3%81%A7%E7%B0%A1%E5%8D%98%E3%81%ABWebUI%E4%BB%98%E3%81%8D%E3%81%AE%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E7%AB%8B%E3%81%A6%E3%82%8B/</guid>
      <description>はじめに 自分用のメールサーバを建てようと思った時、セキュリティを気にしながら設定を調べて…となかなか大変ですよね。
でもMailuを使うと簡単にWebUI付きのメールサーバが構築できます！
この画像のようにWebUIからもメールの送受信ができるので便利です。
デモサイトがあるので興味のある方は覗いてみてください。
Mailuが備えている機能は次の通りです。
 IMAP, IMAP+, SMTPのメールサーバ WebUIと管理画面 自動返信、自動転送 クォーターなどの管理機能 TLS (Let&#39;s Encrypt対応！), DKIM, アンチウイルスなどのセキュリティ  詳細はプロジェクトのページを見ていただくとして、早速構築してみます。
構築 構築はDigitalOceanという海外のVPS上のdocker-composeでやってみます。
ちなみに下記のリンクから登録すると10ドルのクーポンが貰えます。
一番安いインスタンスであれば2ヶ月間無料で動かせます。是非。
https://m.do.co/c/dc73cf13e37a
構築手順 今回は公式推奨のDebian Stretch(9.3)を使います。
インスタンスが立ち上がったらおもむろに下記コマンドを実行してください。
準備 apt update # すべてYESと答える apt install -y iptables-persistent apt-get autoremove --purge exim4 exim4-base Dockerのインストール # E: Unable to locate package docker-engineと言われても大丈夫 apt-get remove docker docker-engine docker.io apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo &amp;#34;$ID&amp;#34;)/gpg | sudo apt-key add - apt-key fingerprint 0EBFCD88 add-apt-repository &amp;#34;deb [arch=amd64] https://download.</description>
    </item>
    
    <item>
      <title>改行コードの変更</title>
      <link>/post/2017-12-11-%E6%94%B9%E8%A1%8C%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%A4%89%E6%9B%B4/</link>
      <pubDate>Mon, 11 Dec 2017 17:49:00 +0000</pubDate>
      
      <guid>/post/2017-12-11-%E6%94%B9%E8%A1%8C%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%A4%89%E6%9B%B4/</guid>
      <description>改行コードはtrコマンドで変更できる。 標準入力で入力を与えると、標準出力で出力が返ってくる。
tr (置き換え前の改行コード) (置き換え後の改行コード) 例えば、CRをLFに変更したい場合は次の通り。
tr \\r \\n &amp;lt; cr.txt &amp;gt; lf.txt </description>
    </item>
    
    <item>
      <title>ImportError: No module named paramiko</title>
      <link>/post/2017-08-20-importerror-no-module-named-paramiko/</link>
      <pubDate>Sun, 20 Aug 2017 15:38:54 +0000</pubDate>
      
      <guid>/post/2017-08-20-importerror-no-module-named-paramiko/</guid>
      <description>Ansible徹底入門を写経していたところ、Dynamic Inventoryのvagrant.py実行で下記エラーが出てしまった。
 元入ってるpythonとこの本に従って入れたpythonがごっちゃになっているようだった。
vagrant.pyの実行だけなら “`python2 ./vagrant.py“` で動くが、ansible-playbookでインベントリにvagrant.pyを使うとなるとエラーとなる。
そこでvirtualenvを使って、ディレクトリ単位でpythonを管理する。
 具体的には次のようにする。
 virtualenv環境を終了する場合は次のコマンドを実行する。
  </description>
    </item>
    
    <item>
      <title>ImageMagicのコマンドで画像サイズを調べる方法</title>
      <link>/post/2017-07-24-imagemagic%E3%81%AE%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E7%94%BB%E5%83%8F%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 24 Jul 2017 15:33:16 +0000</pubDate>
      
      <guid>/post/2017-07-24-imagemagic%E3%81%AE%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E7%94%BB%E5%83%8F%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>identifyコマンドを使う。具体的には次の通り。
formatオプションで表示内容を制御できる。</description>
    </item>
    
    <item>
      <title>Apacheでユーザエージェントでアクセス拒否する</title>
      <link>/post/2017-07-23-apache%E3%81%A7%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%A8%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%B3%E3%83%88%E3%81%A7%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E6%8B%92%E5%90%A6%E3%81%99%E3%82%8B/</link>
      <pubDate>Sun, 23 Jul 2017 22:40:43 +0000</pubDate>
      
      <guid>/post/2017-07-23-apache%E3%81%A7%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%A8%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%B3%E3%83%88%E3%81%A7%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E6%8B%92%E5%90%A6%E3%81%99%E3%82%8B/</guid>
      <description>こんな感じで拒否できる (Apache 2.2系以前の場合)。
  </description>
    </item>
    
    <item>
      <title>ディスク容量 / ディスク使用量が空き容量 (%)と一致しない場合</title>
      <link>/post/2017-06-23-%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E5%AE%B9%E9%87%8F-%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E4%BD%BF%E7%94%A8%E9%87%8F%E3%81%8C%E7%A9%BA%E3%81%8D%E5%AE%B9%E9%87%8F-%E3%81%A8%E4%B8%80%E8%87%B4/</link>
      <pubDate>Fri, 23 Jun 2017 17:20:08 +0000</pubDate>
      
      <guid>/post/2017-06-23-%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E5%AE%B9%E9%87%8F-%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E4%BD%BF%E7%94%A8%E9%87%8F%E3%81%8C%E7%A9%BA%E3%81%8D%E5%AE%B9%E9%87%8F-%E3%81%A8%E4%B8%80%E8%87%B4/</guid>
      <description>ext4ディスクの場合、デフォルトで総容量の5%が/root用として予約されている。
ディスク容量 / ディスク使用量が空き容量 (%)と一致しない場合、こちらの可能性が高い。
 この領域を使用しない場合はこの予約容量を0にすることができる。
 予約容量の確認  Reserved block count × Block size が 予約容量[byte]となる。
 予約容量の削除   </description>
    </item>
    
    <item>
      <title>Linuxコマンドで添付ファイル付きのメールを送る</title>
      <link>/post/2017-05-12-linux%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E6%B7%BB%E4%BB%98%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BB%98%E3%81%8D%E3%81%AE%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%92%E9%80%81%E3%82%8B/</link>
      <pubDate>Fri, 12 May 2017 19:02:55 +0000</pubDate>
      
      <guid>/post/2017-05-12-linux%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E6%B7%BB%E4%BB%98%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BB%98%E3%81%8D%E3%81%AE%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%92%E9%80%81%E3%82%8B/</guid>
      <description>Linuxコマンドで添付ファイル付きのメールを送りたい場合の手順です。
下記内容をsendmail -i -tにパイプで渡します。
`From: (送信元メールアドレス)To: (送信先メールアドレス)Subject: (件名)Content-Type: multipart/mixed; boundary=&amp;quot;BOUNDARY&amp;quot;・コンテンツタイプにはapplication/pdf等添付ファイルに応じたものを入力します。
・boundary=&amp;quot;BOUNDARY&amp;quot;のBOUNDARYは任意の文字列で大丈夫です。</description>
    </item>
    
    <item>
      <title>SSHで踏み台を利用する場合の.ssh/config</title>
      <link>/post/2017-05-12-ssh%E3%81%A7%E8%B8%8F%E3%81%BF%E5%8F%B0%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE-sshconfig/</link>
      <pubDate>Fri, 12 May 2017 18:54:38 +0000</pubDate>
      
      <guid>/post/2017-05-12-ssh%E3%81%A7%E8%B8%8F%E3%81%BF%E5%8F%B0%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE-sshconfig/</guid>
      <description>SSHでサーバにログインする時、踏み台を経由する場合があります。
そんな時の.ssh/configの設定です。
下記設定であれば、
ssh (SSH先識別名)
で踏み台サーバを経由して目的のサーバにログインできます。
`SSH先 Host (SSH先識別名)Hostname IPアドレスProxyCommand ssh -W %h:%p SSH踏み台識別名</description>
    </item>
    
  </channel>
</rss>