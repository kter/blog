<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Route53 on ことえりブログ</title>
    <link>/tags/Route53/</link>
    <description>Recent content in Route53 on ことえりブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Nov 2018 12:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/Route53/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWSマネージドサービスのみでリダイレクトさせる</title>
      <link>/post/2018-11-27-AWS%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%89%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E3%81%BF%E3%81%A7%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88%E3%81%95%E3%81%9B%E3%82%8B/</link>
      <pubDate>Tue, 27 Nov 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/2018-11-27-AWS%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%89%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E3%81%BF%E3%81%A7%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88%E3%81%95%E3%81%9B%E3%82%8B/</guid>
      <description>http通信をhttpsにリダイレクトしたり、またゾーンアペックスからサブドメインへのリダイレクト (google.com -&amp;gt; www.google.com のような)は一般だとNGINXやApacheで設定…となりますが、AWSのサービスを駆使すれば必要ありません。 それぞれ説明します。
http通信をhttpsにリダイレクト ALBを使います。 80番のターゲットグループでリダイレクトの設定を行えばOK.
ゾーンアペックスからサブドメインへのリダイレクト Route53とS3を使います。もしhttpsもリダイレクトしたい場合はCloudFrontも使います。
S3 ゾーンアペックス名でバケットを作った後、Static website hostingでリダイレクトの設定を行います。 ※バケットポリシー等の設定は不要です。
CloudFront (httpsも使う場合） S3をオリジンとしたCloudFrontを用意します。わざわざCloudFrontを利用する理由は、S3だとカスタムのhttps証明書が入らないからです。 なのでCloudFrontではhttps証明書も設定します。 ※オリジンの設定にはリストで出てくるS3ではなく、Static website hostingで出てくるエンドポイントのドメイン部分をコピペして設定します。
Route53 ゾーンアペックスのAレコードのエイリアスとしてCloudFront　(CloudFrontを使用しない場合はS3)　を指定します。</description>
    </item>
    
    <item>
      <title>AWS VPCでRoute53のプライベートホストゾーンを使う</title>
      <link>/post/2018-01-25-AWS-VPC%E3%81%A7Route53%E3%81%AE%E3%83%97%E3%83%A9%E3%82%A4%E3%83%99%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E3%82%BE%E3%83%BC%E3%83%B3%E3%82%92%E4%BD%BF%E3%81%86/</link>
      <pubDate>Thu, 25 Jan 2018 11:50:00 +0000</pubDate>
      
      <guid>/post/2018-01-25-AWS-VPC%E3%81%A7Route53%E3%81%AE%E3%83%97%E3%83%A9%E3%82%A4%E3%83%99%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E3%82%BE%E3%83%BC%E3%83%B3%E3%82%92%E4%BD%BF%E3%81%86/</guid>
      <description>はじめに VPCでのプライベートホストゾーンについて説明します。
これはroute53.testのような実在しないドメインをRoute53に登録&amp;amp;設定すれば、設定したVPC限定でそのドメインが使えるというものです。
これを使って例えば次のようなことができます。
インスタンスAにweb.route53.testというレコードセットをRoute53に登録
↓
設定したVPCのインスタンスからはwebという名前でインスタンスAにアクセスできる（どちらかと言うとリゾルバの機能ですが）
踏み台からのSSHやリレー、プロキシ先の指定などに便利ですよね。
料金について こちらをご覧ください。月0.5ドルかかります。日割り計算はありません。
ただし作成から12時間は料金は発生しないようなので、テスト目的ならば12時間以内に削除しましょう。
設定 ドキュメントにいろいろ書かれていますが、大抵の場合次の手順でいけるはずです。
 Route53でプライベートホストゾーンを登録 VPCのDNS, DHCP設定を変更  VPCのDHCPの設定を変更すれば/etc/resolv.confの設定は自動で行われます。便利ですね。
1. Route53でプライベートホストゾーンを登録 Route53のページに行ってホストゾーンを作成します。
特に迷うことはないと思いますがこんな感じで
次にレコードを登録しましょう。
登録するIPはもちろんプライベートIPアドレスで。
Route53での作業は以上です。
2. VPCのDHCP設定を変更 VPC一覧のページに移動し、DNSホスト名をはいに設定します。
次にVPCのDHCP オプションセットというページに移動します。
ここで予めオプションの値をメモしておいてください。
※多分こんな感じで設定がされていると思います。
domain-name = ap-northeast-1.compute.internal;domain-name-servers = AmazonProvidedDNS;
ドメイン名にメモしたdomain-nameで指定されている値とスペースを開けて今回設定するプライベートホストゾーンの値を入力します。
ドメインネームサーバーにはAmazonProvidedDNSと入力してください。
最後にVCPの一覧画面に移動し、DHCPオプションセットの編集から、先ほど作成したオプションセットを指定します。
5分程度待つと、設定したVPC内のインスタンスの/etc/resolv.confが自動で変更され、instance01とinstance02でIPが引けるようになります。
※テストで作った場合は忘れずにホストゾーンを削除しましょう！
注意点 自分は試していないのですが、ドキュメントに記載がある通り、名前空間が重複するパブリックゾーンとプライベートホストゾーンだと注意が必要です。
たとえばdevドメインのような実在するパブリックなドメインをプライベートホストゾーンに登録してしまうと、パブリックな方のDNSサーバには問い合わせてくれないということです。 気をつけましょう。</description>
    </item>
    
    <item>
      <title>Route53をGitで管理するようにした</title>
      <link>/post/2017-08-11-roadworker%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6route53%E3%82%92git%E3%81%A7%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%9F/</link>
      <pubDate>Fri, 11 Aug 2017 09:03:57 +0000</pubDate>
      
      <guid>/post/2017-08-11-roadworker%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6route53%E3%82%92git%E3%81%A7%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%9F/</guid>
      <description>Route53のレコード管理は困難を極める。
いつの間にかレコードが増えてきて、後から消そうと思っても用途などが思い出せず消すに消せない…そんなレコードが増える経験をした。
Route53をGitで管理するようにすればPRによる第三者のレビューがやりやすいし、何より誰がいつどんな用途でレコードを追加・変更・削除したのかが丸分かりである。
ここではroadworkerというナイスなRuby製のGemを使った。
https://github.com/codenize-tools/roadworker
使い方は上記リポジトリもあるが、基本的には次の通り。
  現在のRoute53登録情報をファイルにする (初回のみ) roadwork -e -o Routefile  ファイルを編集する
  確認のためにdry-runする roadwork -a &amp;ndash;dry-run  Route53に反映 roadwork -a  反映確認 roadwork -t    これでRoute53の管理が楽になった。
次はGitHubにファイルをプッシュするとCIツールによってRoute53に自動的に反映させるようにしたい。
8/20追記
Jenkinsで自動反映するようにした。
GitHubのWebHookをJenkinsで受けて、roadworkを実行。進捗はJenkinsのSlackプラグインを使った。</description>
    </item>
    
  </channel>
</rss>