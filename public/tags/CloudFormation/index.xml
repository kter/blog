<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CloudFormation on ことえりブログ</title>
    <link>/tags/CloudFormation/</link>
    <description>Recent content in CloudFormation on ことえりブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Oct 2018 12:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/CloudFormation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CloudFormationでSecurityGroupを作るときにYou may not define rules between a VPC group and a non-VPC groupとエラーが出るときの対応</title>
      <link>/post/2018-10-25-CloudFormation%E3%81%A7SecurityGroup%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%ABYou-may-not-define-rules-between-a-VPC-group-and-a-non-VPC-group%E3%81%A8%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%BF%9C/</link>
      <pubDate>Thu, 25 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/2018-10-25-CloudFormation%E3%81%A7SecurityGroup%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%ABYou-may-not-define-rules-between-a-VPC-group-and-a-non-VPC-group%E3%81%A8%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%BF%9C/</guid>
      <description>CloudFormationでSecurityGroupを作るときにYou may not define rules between a VPC group and a non-VPC groupとエラーが出るときの対応
解決まで地味に30分程度掛かったのでメモ。
CloudFormationで次のような感じでSecurityGroupを作ろうとすると、You may not define rules between a VPC group and a non-VPC groupとエラーが出てSecurityGroupが作れない。
DBEC2SecurityGroup: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: &amp;#34;Allow access from specific SecurityGroup&amp;#34; SecurityGroupIngress: - IpProtocol: tcp FromPort: &amp;#39;3306&amp;#39; ToPort: &amp;#39;3306&amp;#39; SourceSecurityGroupId: !Ref &amp;#39;EC2SecurityGroup&amp;#39; これはSourceSecurityGroupにVPCのSecurityGroupが指定されているのに、（VpcIdが指定されていないため）EC2 Classic環境にSecurityGroupが作られようとしているため出たエラーである（言葉にするとややこしい）。
ドキュメントにもあるが正しくはこんな感じ。
DBEC2SecurityGroup: Type: AWS::EC2::SecurityGroup Properties: VpcId: !Ref VPC GroupDescription: &amp;#34;Allow access from specific SecurityGroup&amp;#34; SecurityGroupIngress: - IpProtocol: tcp FromPort: &amp;#39;3306&amp;#39; ToPort: &amp;#39;3306&amp;#39; SourceSecurityGroupId: !</description>
    </item>
    
    <item>
      <title>CloudFormationで作るCodePipelineで継続的デリバリされるECSクラスタを考えてみた</title>
      <link>/post/2018-09-30-CloudFormation%E3%81%A7%E4%BD%9C%E3%82%8BCodePipeline%E3%81%A7%E7%B6%99%E7%B6%9A%E7%9A%84%E3%83%87%E3%83%AA%E3%83%90%E3%83%AA%E3%81%95%E3%82%8C%E3%82%8BECS%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%82%92%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Sun, 30 Sep 2018 12:00:00 +0000</pubDate>
      
      <guid>/post/2018-09-30-CloudFormation%E3%81%A7%E4%BD%9C%E3%82%8BCodePipeline%E3%81%A7%E7%B6%99%E7%B6%9A%E7%9A%84%E3%83%87%E3%83%AA%E3%83%90%E3%83%AA%E3%81%95%E3%82%8C%E3%82%8BECS%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%82%92%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>CloudFormationで作るCodePipelineで継続的デリバリされるECSクラスタを考えてみました。
前提  リポジトリにはGitHubを使う CloudFormationで環境一式が作成される ECSは単一タスク定義にコンテナ2つ  WebとAppコンテナ   CodepipelineはWeb, Appコンテナ用それぞれ用意  コンポーネント GitHub リポジトリを分けます。分ける理由はファイル更新時のデリバリー範囲を狭めるためです (Webコンテナの設定変更だけならAppコンテナは反映しない)。
 learning_of_codepipeline_ecs  CloudFormation設定ファイル   learning_of_codepipeline_ecs_app  Appコンテナ用 Dockerfile Appコンテナ用 Codebuild設定ファイル   learning_of_codepipeline_ecs_web  Webコンテナ用 Dockerfile Webコンテナ用 Codebuild設定ファイル    CloudFormation 下記リソースの作成を行います。
 CodePipeline CodeBuild  App, WebコンテナイメージをビルドしてECRにPush   ECSクラスタ  App, Webコンテナを動かす    CodePipeline 単一PipelineでApp, WebコンテナのビルドとECSへのデプロイをやろうと思ったのですが、下記問題があったのでWebとAppで別のPipelineにしました。
 Web, Appどちらかの更新で両方のビルドが始まってしまう ECSへのデプロイ時に片方が常に失敗する  成果物 CodePipeline https://github.com/kter/learning_of_codepipeline_ecs Webコンテナ用 https://github.com/kter/learning_of_codepipeline_ecs_web Appコンテナ用 https://github.</description>
    </item>
    
    <item>
      <title>AWS Lambda (Python) からCloudFormationのスタック作成・削除を行う</title>
      <link>/post/2018-08-18-AWS-Lambda-Python-%E3%81%8B%E3%82%89CloudFormation%E3%81%AE%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E4%BD%9C%E6%88%90%E5%89%8A%E9%99%A4%E3%82%92%E8%A1%8C%E3%81%86/</link>
      <pubDate>Sat, 18 Aug 2018 15:08:02 +0000</pubDate>
      
      <guid>/post/2018-08-18-AWS-Lambda-Python-%E3%81%8B%E3%82%89CloudFormation%E3%81%AE%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E4%BD%9C%E6%88%90%E5%89%8A%E9%99%A4%E3%82%92%E8%A1%8C%E3%81%86/</guid>
      <description>業務時間だけ使うAWSリソースがあり、それをCloudFormationを使って管理しているという場合、Lambdaからスタックの作製・削除ができると便利です。
削除するのは簡単なのですが、作成するときは少し手こずったのでそれを書いておきます。
作成 TemplateURLにS3バケット内のファイルを指定する場合は次のようにします。 ※httpsとスキームが付きますが、Webホスティングの設定は必要ありません。
https://s3-ap-northeast-1.amazonaws.com/(S3バケット名)/ファイル名 ということで作成するときはこんな感じになります。
cf = boto3.client(&amp;#39;cloudformation&amp;#39;) res = cf.create_stack( StackName=(スタック名), TemplateURL=&amp;#39;https://s3-ap-northeast-1.amazonaws.com/(S3バケット名)/ファイル名&amp;#39;, Parameters=[ { &amp;#39;ParameterKey&amp;#39;: &amp;#39;パラメータ名1&amp;#39;, &amp;#39;ParameterValue&amp;#39;: &amp;#39;設定値1&amp;#39; }, { &amp;#39;ParameterKey&amp;#39;: &amp;#39;パラメータ名2&amp;#39;, &amp;#39;ParameterValue&amp;#39;: &amp;#39;設定値2&amp;#39; }, ], Capabilities=[ &amp;#39;CAPABILITY_NAMED_IAM&amp;#39;, ], ) 削除 削除はスタック名を指定するだけなのでとても簡単。
cf = boto3.client(&amp;#39;cloudformation&amp;#39;) res = cf.delete_stack( StackName=(スタック名) ) </description>
    </item>
    
  </channel>
</rss>