<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GKE on ことえりブログ</title>
    <link>/tags/GKE/</link>
    <description>Recent content in GKE on ことえりブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Mar 2018 22:26:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/GKE/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GKEでなるべく安くKubernetesクラスタを作成してPrometheus &#43; Grafanaを使ってみる Part3 -SSL編-</title>
      <link>/post/2018-03-02-GKE%E3%81%A7%E3%81%AA%E3%82%8B%E3%81%B9%E3%81%8F%E5%AE%89%E3%81%8FKubernetes%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6Prometheus-&#43;-Grafana%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-Part3-SSL%E7%B7%A8-/</link>
      <pubDate>Fri, 02 Mar 2018 22:26:00 +0000</pubDate>
      
      <guid>/post/2018-03-02-GKE%E3%81%A7%E3%81%AA%E3%82%8B%E3%81%B9%E3%81%8F%E5%AE%89%E3%81%8FKubernetes%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6Prometheus-&#43;-Grafana%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-Part3-SSL%E7%B7%A8-/</guid>
      <description>タイトルの通りGKE (Google Kubernetes Engine)でKubernetesクラスタを作成して、その上でPrometheusとGrafanaを動かしてみます。
前回クラスタとそこにIngressを追加したので、今回はIngressでSSLを使えるようにします。
はじめに cert-managerを使ってLet&#39;s Encryptから証明書を取得・設定していきます。
cert-managerで証明書を取得するためにはDNS認証かHTTP認証のいずれかを行う必要があります。
DNS認証はRoute53ではうまく動かなかったので、HTTP認証で行います。
cert-managerのインストール helmを使ってインストールします。
下記コマンドを実行してください。
git clone https://github.com/jetstack/cert-manager cd cert-manager helm install \  --name cert-manager \  --namespace=kube-system \  contrib/charts/cert-manager \  --set ingressShim.extraArgs=&amp;#39;{--default-issuer-name=letsencrypt-prod,--default-issuer-kind=ClusterIssuer}&amp;#39; 設定 下記yamlをClusterIssuer.ymlとして保存してください。
※メールアドレスは自分のものを設定してください。
apiVersion: certmanager.k8s.io/v1alpha1 kind: ClusterIssuer metadata: name: letsencrypt-prod namespace: default spec: acme: # The ACME server URL server: https://acme-v01.api.letsencrypt.org/directory # Email address used for ACME registration email: (メールアドレス) # Name of a secret used to store the ACME account private key privateKeySecretRef: name: letsencrypt-prod # Enable the HTTP-01 challenge provider http01: {} 下記yamlをcertificate.</description>
    </item>
    
    <item>
      <title>GKEでなるべく安くKubernetesクラスタを作成してPrometheus &#43; Grafanaを使ってみる Part2 -Ingress編</title>
      <link>/post/2018-03-01-GKE%E3%81%A7%E3%81%AA%E3%82%8B%E3%81%B9%E3%81%8F%E5%AE%89%E3%81%8FKubernetes%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6Prometheus-&#43;-Grafana%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-Part2-Ingress%E7%B7%A8-/</link>
      <pubDate>Thu, 01 Mar 2018 23:50:00 +0000</pubDate>
      
      <guid>/post/2018-03-01-GKE%E3%81%A7%E3%81%AA%E3%82%8B%E3%81%B9%E3%81%8F%E5%AE%89%E3%81%8FKubernetes%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6Prometheus-&#43;-Grafana%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-Part2-Ingress%E7%B7%A8-/</guid>
      <description>タイトルの通りGKE (Google Kubernetes Engine)でKubernetesクラスタを作成して、その上でPrometheusとGrafanaを動かしてみます。
前回クラスタを作成したので今回はIngressを追加します。
Ingressを追加することで、クラスタ内のサービスにインターネットからアクセスできるようになります。
はじめに Ingressは普通にGKEで作成すると、Ingress ControllerがGCPのロードバランサーを作成します。
しかしこれが高い…。月額18ドルも掛かります。
そこでGCPのロードバランサーの代わりにnginx-ingressというNGINXを使います。
こちらを一番小さいf1-microのノードで動かせば4.28ドルで済みます。
しかもf1-microはAlways Freeの条件であるus-east1, us-west1, us-central1のいずれかで動かせばタダで動かせます。
なので今回はロードバランサーを使わず、nginx-ingressを使うことにします。
前提作業 前回の記事のGKEでなるべく安くKubernetesクラスタを作成してPrometheus + Grafanaを使ってみる Part1 -クラスタ作成編-の手順でクラスタを作成してあることを前提とします。
また疎通確認にドメインを使用しますので、用意してください。
ドメインを持っていない方はnip.ioとか使うといいと思います。知らんけど。
Ingress Controller用ノードを作成 前回作成したクラスタのノードはプリエンプティブノードのため一定時間で削除されます。
nginx-ingressでは静的グローバルIPをノードに割り当てる必要があるため、削除されないノードを別途作成します。
具体的にはIngress Controllerを動かすためのノードプールを作成します。
 クラスタ編集画面を開く &amp;ldquo;ノードプールを追加&amp;quot;ボタンを選択 名前にload-balancerと入力 マシンタイプにmicro (f1-micro)を選択 ノードあたりのブートディスク サイズに10GBと入力  Ingress Controller用ノードの設定 下記コマンドを実行します。
export CLUSTER_NAME=クラスタ名 export ZONE=us-west1-b export REGION=us-west1 # kubectlを使えるようにする gcloud container clusters get-credentials $CLUSTER_NAME --zone $ZONE # 静的グローバルIPアドレスを確保 gcloud compute addresses create $CLUSTER_NAME-ip --region $REGION # 静的グローバルIPアドレスを取得 export LB_ADDRESS_IP=$(gcloud compute addresses list | grep $CLUSTER_NAME-ip | awk &amp;#39;{print $3}&amp;#39;) # nginx-ingressで使うノード名を取得 export LB_INSTANCE_NAME=$(kubectl describe nodes | grep Name: | tail -n1 | awk &amp;#39;{print $2}&amp;#39;) # nginx-ingressしか動かないようにする (リソースの確保のため) kubectl taint nodes $LB_INSTANCE_NAME role=nginx-ingress-controller:NoSchedule # 静的グローバルIPアドレスをノードに紐付ける export LB_INSTANCE_NAT=external-nat gcloud compute instances delete-access-config $LB_INSTANCE_NAME --access-config-name &amp;#34;$LB_INSTANCE_NAT&amp;#34; --zone $ZONE gcloud compute instances add-access-config $LB_INSTANCE_NAME --access-config-name &amp;#34;$LB_INSTANCE_NAT&amp;#34; --address $LB_ADDRESS_IP --zone $ZONE # ラベルの設定 kubectl label nodes $LB_INSTANCE_NAME role=load-balancer # タグの設定 (これで80と443に外部からアクセスできるようになる) gcloud compute instances add-tags $LB_INSTANCE_NAME --tags http-server,https-server --zone $ZONE helmの導入 helmとはKubernetesのパッケージマネージャーです。</description>
    </item>
    
    <item>
      <title>GKEでなるべく安くKubernetesクラスタを作成してPrometheus &#43; Grafanaを使ってみる Part1 -クラスタ作成編-</title>
      <link>/post/2018-02-11-GKE%E3%81%A7Kubernetes%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6Prometheus-&#43;-Grafana%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-Part1/</link>
      <pubDate>Sun, 11 Feb 2018 11:38:00 +0000</pubDate>
      
      <guid>/post/2018-02-11-GKE%E3%81%A7Kubernetes%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6Prometheus-&#43;-Grafana%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B-Part1/</guid>
      <description>タイトルの通りGKE (Google Kubernetes Engine)でKubernetesクラスタを作成して、その上でPrometheusとGrafanaを動かしてみます。
まずはGKEでKubernetesクラスタを作成してみます。
はじめに GCP(Google Cloud Platform)アカウントの登録とプロジェクトの作成が終わってる前提でお話します。
適当に作っておいてください。
クラスタの作成 左上のハンバーガーメニューからKubernetes Engineを選択
※初回アクセス時には準備に数分かかります。
クラスタの作成ボタンを押下します。
設定 今回のように可用性 (ダウンタイム)に目をつぶるならノードにプリエンプティブを使うことで、インスタンスの費用を7割程度抑えることが出来ます (オレゴン、g1-smallの場合)。
※プリエンプティブにした場合、２４時間以内に勝手に落とされてしまうので気をつけてください。
ノードは価格の安い海外のリージョンを使い、マシンタイプはsmallを使います。
またデフォルトでは、ノードのディスクサイズが100GBという罠があるので、忘れずに減らしておきましょう。
 ゾーン: us-west1-b マシンタイプ: small（g1-small) 自動スケーリング: オン 最大サイズ: 6 プリエンプティブ ノード: 有効 ノードあたりのブートディスク サイズ: 10GB HTTP 負荷分散: 無効  接続 クラスタの作成が終わったらkubectlコマンドでクラスタに接続してみます。
接続ボタンを押下し、&amp;ldquo;Cloud Shellで実行&amp;quot;を押下します。
ウインドウ下部に、コマンドが入力済みの状態でコンソールが表示されます。 Enterキーを押してコマンドを実行します。
これでkubectlでアクセスできるようになりました。
kubectl get nodesを実行して作成したノードが表示されるかどうか確認します。
以上</description>
    </item>
    
    <item>
      <title>KubernetesでNFSを使う</title>
      <link>/post/2017-07-19-kubernetes%E3%81%A7nfs%E3%82%92%E4%BD%BF%E3%81%86/</link>
      <pubDate>Wed, 19 Jul 2017 16:50:32 +0000</pubDate>
      
      <guid>/post/2017-07-19-kubernetes%E3%81%A7nfs%E3%82%92%E4%BD%BF%E3%81%86/</guid>
      <description>KurbernetesのPod / Node間でファイルを共有するために、NFSを使ってみる。
ググったり公式のリポジトリを参考にしたけどうまくいかなかったのでメモ。
 おおまかな手順   Compute Engineでディスクを用意
  NFSコンテナの用意
  コンテナからNFSを利用
   手順  Compute Engineでディスクを用意 コンソールかCLI等から普通に作成。
  NFSコンテナの用意 下記2ファイルを用意してkubectl createする。</description>
    </item>
    
    <item>
      <title>minikubeを使った後にGKEを使いたい場合</title>
      <link>/post/2017-07-14-minikube%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E5%BE%8C%E3%81%ABgke%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88/</link>
      <pubDate>Fri, 14 Jul 2017 13:04:59 +0000</pubDate>
      
      <guid>/post/2017-07-14-minikube%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E5%BE%8C%E3%81%ABgke%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88/</guid>
      <description>minikubeを使ったあとにGKEを使おうと(kubectlコマンドを実行)すると、次のエラーが発生して接続できない。
対応としてはgcloud container clustersコマンドでクラスタ名を指定すればよい。
  </description>
    </item>
    
    <item>
      <title>kubernetes on GKEでLet&amp;#8217;s Encryptを使う</title>
      <link>/post/2017-07-09-kubernetes-on-gke%E3%81%A7lets-encrypt%E3%82%92%E4%BD%BF%E3%81%86/</link>
      <pubDate>Sun, 09 Jul 2017 13:05:28 +0000</pubDate>
      
      <guid>/post/2017-07-09-kubernetes-on-gke%E3%81%A7lets-encrypt%E3%82%92%E4%BD%BF%E3%81%86/</guid>
      <description>kubernetes on GKEでLet’s Encryptを使ったときのメモ
kubenetesでLet’s Encryptを使うのに、kube-legoを使用します。
kube-legoではGCEのロードバランサーとNginx Ingress Controllerが使えるようですが、今回はロードバランサーを使う手順でやります（このあたりよく分かっていない…)。
 7月13日追記
GCEのロードバランサーを使わない手順ができました。
https://github.com/kter/kube-study/tree/master/ingress/nginx-tls
kube-legoのダウンロード (メールアドレスを自分のものに編集)
 IPの払い出し IPを払い出す
払い出したIPにドメインを紐付けておく。
 ファイルの作成 kube-legoで使用するnginx-ingress.ymlを作成する。
SSL化したいサービスを下記web-service.ymlとした場合、nginx-ingress.ymlは次のようになるので適当な場所に作成しておく。
 kube-legoを作成する 設定が反映されるまで、十数分掛かるので暫く待つ。
備考 作成されるものはkube-legoというnamespaceとなっているため、kubectlを実行する際は--namespace kube-legoが必要になる。</description>
    </item>
    
  </channel>
</rss>