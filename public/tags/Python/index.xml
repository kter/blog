<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on ことえりブログ</title>
    <link>/tags/Python/</link>
    <description>Recent content in Python on ことえりブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Sep 2018 16:28:02 +0000</lastBuildDate>
    
	<atom:link href="/tags/Python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS SAMのLambda (Python)で環境変数で設定した値を配列で受け取る</title>
      <link>/post/2018-09-08-AWS-SAM%E3%81%AELambda-Python%E3%81%A7%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%9F%E5%80%A4%E3%82%92%E9%85%8D%E5%88%97%E3%81%A7%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8B/</link>
      <pubDate>Sat, 08 Sep 2018 16:28:02 +0000</pubDate>
      
      <guid>/post/2018-09-08-AWS-SAM%E3%81%AELambda-Python%E3%81%A7%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%9F%E5%80%A4%E3%82%92%E9%85%8D%E5%88%97%E3%81%A7%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8B/</guid>
      <description>環境変数に設定された値は文字列としてしか取得できません。
なのでos.getenv()で値を取得したあとsplit()で配列化します。 ついでにstrip()も呼んでスペースも除去します。コードはこんな感じです。
array = [x.strip() for x in str(os.getenv(&amp;#39;(環境変数名)&amp;#39;)).split(&amp;#39;,&amp;#39;)] yamlファイルはこんな感じです。
Resources: Lambda: Type: &amp;#39;AWS::Serverless::Function&amp;#39; Properties: Handler: lambda_function.lambda_handler Runtime: python3.6 CodeUri: . MemorySize: 128 Role: Fn::GetAtt: - LambdaRole - Arn Timeout: 3 Environment: Variables: (環境変数名): &amp;#39;val1, val2, val3&amp;#39; </description>
    </item>
    
    <item>
      <title>AWS Lambda (Python) からCloudFormationのスタック作成・削除を行う</title>
      <link>/post/2018-08-18-AWS-Lambda-Python-%E3%81%8B%E3%82%89CloudFormation%E3%81%AE%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E4%BD%9C%E6%88%90%E5%89%8A%E9%99%A4%E3%82%92%E8%A1%8C%E3%81%86/</link>
      <pubDate>Sat, 18 Aug 2018 15:08:02 +0000</pubDate>
      
      <guid>/post/2018-08-18-AWS-Lambda-Python-%E3%81%8B%E3%82%89CloudFormation%E3%81%AE%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E4%BD%9C%E6%88%90%E5%89%8A%E9%99%A4%E3%82%92%E8%A1%8C%E3%81%86/</guid>
      <description>業務時間だけ使うAWSリソースがあり、それをCloudFormationを使って管理しているという場合、Lambdaからスタックの作製・削除ができると便利です。
削除するのは簡単なのですが、作成するときは少し手こずったのでそれを書いておきます。
作成 TemplateURLにS3バケット内のファイルを指定する場合は次のようにします。 ※httpsとスキームが付きますが、Webホスティングの設定は必要ありません。
https://s3-ap-northeast-1.amazonaws.com/(S3バケット名)/ファイル名 ということで作成するときはこんな感じになります。
cf = boto3.client(&amp;#39;cloudformation&amp;#39;) res = cf.create_stack( StackName=(スタック名), TemplateURL=&amp;#39;https://s3-ap-northeast-1.amazonaws.com/(S3バケット名)/ファイル名&amp;#39;, Parameters=[ { &amp;#39;ParameterKey&amp;#39;: &amp;#39;パラメータ名1&amp;#39;, &amp;#39;ParameterValue&amp;#39;: &amp;#39;設定値1&amp;#39; }, { &amp;#39;ParameterKey&amp;#39;: &amp;#39;パラメータ名2&amp;#39;, &amp;#39;ParameterValue&amp;#39;: &amp;#39;設定値2&amp;#39; }, ], Capabilities=[ &amp;#39;CAPABILITY_NAMED_IAM&amp;#39;, ], ) 削除 削除はスタック名を指定するだけなのでとても簡単。
cf = boto3.client(&amp;#39;cloudformation&amp;#39;) res = cf.delete_stack( StackName=(スタック名) ) </description>
    </item>
    
    <item>
      <title>機密情報をLambdaで使いたいとき</title>
      <link>/post/2018-07-26-%E6%A9%9F%E5%AF%86%E6%83%85%E5%A0%B1%E3%82%92Lambda%E3%81%A7%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D/</link>
      <pubDate>Thu, 26 Jul 2018 00:48:00 +0000</pubDate>
      
      <guid>/post/2018-07-26-%E6%A9%9F%E5%AF%86%E6%83%85%E5%A0%B1%E3%82%92Lambda%E3%81%A7%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D/</guid>
      <description>AWS Systems Manager パラメータストアを使いましょう。
ソースコードに書きたくない、環境変数にも残したくない。そういったときにパラメータストアが役に立ちます。
パラメータストアでは暗号化もサポートしているので、機密情報はこれを使って保存します。
パラメータストア自体の使い方はGUIからできるので省略しますが、Lambda(Python)では次のような感じでサクッと利用することができます。
ssm = boto3.client(&#39;ssm&#39;) ssm_response = ssm.get_parameters( Names = [ (パラメータストアキー名), ], WithDecryption=True ) print(ssm_response[&#39;Parameters&#39;][0][&#39;Value&#39;]) IAMポリシーはこんな感じです。
{ &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Statement&amp;quot;: [ { &amp;quot;Action&amp;quot;: [ &amp;quot;ssm:GetParameters&amp;quot; ], &amp;quot;Resource&amp;quot;: [ &amp;quot;arn:aws:ssm:*:*:parameter/(パラメータストアキー名)&amp;quot; ], &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot; } ] } </description>
    </item>
    
    <item>
      <title>Lambda (Python) から特定のログストリームにログを書こうとして苦戦した2つのポイント</title>
      <link>/post/2018-07-17-Lambda-Python-%E3%81%8B%E3%82%89%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%AD%E3%82%B0%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%81%AB%E3%83%AD%E3%82%B0%E3%82%92%E6%9B%B8%E3%81%93%E3%81%86%E3%81%A8%E3%81%97%E3%81%A6%E8%8B%A6%E6%88%A6%E3%81%97%E3%81%9F2%E3%81%A4%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88/</link>
      <pubDate>Tue, 17 Jul 2018 22:48:00 +0000</pubDate>
      
      <guid>/post/2018-07-17-Lambda-Python-%E3%81%8B%E3%82%89%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%AD%E3%82%B0%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E3%81%AB%E3%83%AD%E3%82%B0%E3%82%92%E6%9B%B8%E3%81%93%E3%81%86%E3%81%A8%E3%81%97%E3%81%A6%E8%8B%A6%E6%88%A6%E3%81%97%E3%81%9F2%E3%81%A4%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88/</guid>
      <description>Lambda (Python) から指定のログストリームにログを書こうとして苦戦したのでメモ。
今日使い始めたばかりなので間違ってる点があるかもしれません。もし間違っていたら教えてくださいm(_ _)m
苦戦ポイント1 -put_log_events()の使い方- 結論から言って次のようにする必要があります。
logs_client = boto3.client(&amp;#39;logs&amp;#39;) res = logs_client.describe_log_streams( logGroupName=&amp;#39;(ロググループ名)&amp;#39;, logStreamNamePrefix=&amp;#39;(ログストリーム名)&amp;#39;, ) seq_token = res[&amp;#39;logStreams&amp;#39;][0][&amp;#39;uploadSequenceToken&amp;#39;] res = logs_client.put_log_events( logGroupName=&amp;#39;(ロググループ名)&amp;#39;, logStreamName=&amp;#39;(ログストリーム名)&amp;#39;, logEvents=[ { &amp;#39;timestamp&amp;#39;: int(time.time()) * 1000, &amp;#39;message&amp;#39;: &amp;#39;%sbacked up successfully&amp;#39; % (message) }, ], sequenceToken=seq_token ) 注意する点が2点ほどあります。
timestampの指定 まず1点目、timestampはUNIX時間に1000を掛けたものを整数で指定しましょう。つまり単位がミリ秒です。
sequenceToken 2点目、ログを書き出すput_log_events()にはsequenceTokenというパラメータが必要になります。 ログストリームへの初回の書き込みなら（多分）いらないのですが、2回目以降は必要になります。
上記コードではsequenceTokenをdescribe_log_streams()から取得していますが、put_log_events()のレスポンスの中にもありますのでそれを使ってもいいです。
苦戦ポイント2 -IAM ポリシー- 結論から言って次のようにする必要があります。
{ &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;, &amp;#34;Statement&amp;#34;: [ { &amp;#34;Action&amp;#34;: [ &amp;#34;logs:CreateLogGroup&amp;#34;, &amp;#34;logs:CreateLogStream&amp;#34;, &amp;#34;logs:PutLogEvents&amp;#34;, ], &amp;#34;Resource&amp;#34;: [ &amp;#34;arn:aws:logs:*:*:/aws/lambda/(Lambda関数名☆ワイルドカード可☆)&amp;#34;, &amp;#34;arn:aws:logs:*:*:log-group:(ロググループ名):log-stream:(ログストリーム名)&amp;#34; ], &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34; }, { &amp;#34;Action&amp;#34;: [ &amp;#34;logs:DescribeLogStreams&amp;#34; ], &amp;#34;Resource&amp;#34;: [ &amp;#34;arn:aws:logs:*:*:*&amp;#34; ], &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34; } ] } ポリシーについて先に説明させていただきますと、最初のCreateLogGroup, CreateLogStream, PutLogEventsはCloudWatch Logsにログを書き出す（ログストリームの作成も）時に必要です。</description>
    </item>
    
    <item>
      <title>ImportError: No module named paramiko</title>
      <link>/post/2017-08-20-importerror-no-module-named-paramiko/</link>
      <pubDate>Sun, 20 Aug 2017 15:38:54 +0000</pubDate>
      
      <guid>/post/2017-08-20-importerror-no-module-named-paramiko/</guid>
      <description>Ansible徹底入門を写経していたところ、Dynamic Inventoryのvagrant.py実行で下記エラーが出てしまった。
 元入ってるpythonとこの本に従って入れたpythonがごっちゃになっているようだった。
vagrant.pyの実行だけなら “`python2 ./vagrant.py“` で動くが、ansible-playbookでインベントリにvagrant.pyを使うとなるとエラーとなる。
そこでvirtualenvを使って、ディレクトリ単位でpythonを管理する。
 具体的には次のようにする。
 virtualenv環境を終了する場合は次のコマンドを実行する。
  </description>
    </item>
    
  </channel>
</rss>