<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>読書 on ことえりブログ</title>
    <link>/categories/%E8%AA%AD%E6%9B%B8/</link>
    <description>Recent content in 読書 on ことえりブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Jan 2018 11:59:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/%E8%AA%AD%E6%9B%B8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SREサイトリライアビリティエンジニアリングを読んだ (随時更新)</title>
      <link>/post/2018-01-05-SRE%E3%82%B5%E3%82%A4%E3%83%88%E3%83%AA%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A0/</link>
      <pubDate>Fri, 05 Jan 2018 11:59:00 +0000</pubDate>
      
      <guid>/post/2018-01-05-SRE%E3%82%B5%E3%82%A4%E3%83%88%E3%83%AA%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%93%E3%83%AA%E3%83%86%E3%82%A3%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A0/</guid>
      <description>SREサイトリライアビリティエンジニアリングを読んだので、要点をメモ。
現行のシステム管理の問題点  サービスが成長すると運用コストも増加する 開発チームと運用チームでの対立が発生する  Googleのシステム管理について  SRE (サイトリライアビリティエンジニアリング) というアプローチを取る SREとは(Google的には)ソフトウェアエンジニアに運用チームの設計を依頼したときにできるもの UNIXシステム内部とネットワーキングに関する専門知識と、複雑な問題を解決するソフトウェアシステムの開発に対する信念と適正が必要 運用チームで行ってきたことをソフトウェアで自動化する  こうしたことをしない場合、サービス成長とともに運用負荷が増大し続け、多くの人員が必要となる   Googleの場合、運用の業務は全体の50%の時間以内に収めるようにしている  残りの時間はサービスを安定して運用できるようにするための開発作業に当てる    エラーバジェットについて  開発チームとSREチームの対立を解決するための仕組み 100%を信頼性の目標とすることは、基本的にいかなる場合にも間違っているとする  99.999%と100%の可用性は、他の要素（PC/SP, Wi-Fi, ISP, 電力網等)のノイズに紛れてしまう上に、0.001%を埋める労力はユーザーにメリットがない (リリースも遅く、少なくなってしまう）   次の3点を考慮に入れた上で可用性のターゲットを決める。1からそれを引いたものがエラーバジェットとなる (可用性が99.9%の場合は0.1%がエラーバジェット)  ユーザーが満足する可用性のレベル 満足できなかったユーザーにとっての大対策はどのようなものがあるか 可用性のレベルを変更したとしてユーザーのプロダクトの利用の仕方にに何が起こるか   エラーバジェットは超過しない限り自由に使うことができる  機能のローンチに関わるリスク (段階的ロールアウトや1% experiment)のために使うことができる SREの目的をサービス障害をゼロにすることではなく機能のリリース速度を最大化するためにエラーバジェットを使うことになる サービス障害を予測済みのものにすることができ、これが悪いことではなくなる。コントロールすることができるようになる。 必要以上に信頼性をあげない SREと開発者との間でリリース速度と可用性の利害を一致させることができ、リスクについて揉めることなく共通の結論にすることができる    モニタリングについて  人間がメールを読み、何らかの対応アクションの必要性を判断しなければならないシステムは根本的に問題がある  アラートはソフトウェアが解釈を行い、人間はアクションを行わなければならないときのみ通知を受けるようになっているべき   MTTF (平均故障時間)とMTTR (平均修復時間)を考える たとえ障害が多くとも、手作業での介入を必要としないシステムは、介入を必要とする障害が少ないシステムより高い可用性を持つ 人間の作業は手順書に記録していくことで、MTTRに3倍の改善が見られた (Google談) およそ70%のサービス障害は動作中のシステム変更によって生じるもの (Googleの場合) ベストプラクティスは自動化によって下記3点を実現すること。  漸進的なロールアウトの実装 高速かつ正確な問題の検出 安全なロールバック   需要予測とキャパシティプランニングは次の2点を考慮に入れる必要がある。  自然な成長 (プロダクトの利用が進むなど) 突発的な成長 (機能のリリースやマーケティングキャンペーン等)    リスクについて  信頼性と機能追加等のリリースはトレードオフの関係にある  そのため必要以上に信頼性をあげない   可用性はリクエスト数を集計(成功したリクエスト数/総リクエスト数)すると、バッチやストレージ等にも当てはめることができる 可用性のターゲットレベルは下記のことを考慮するべき  期待されているサービスのレベル サービスが直接的に収入(顧客と自身の)につながっているか サービスの有償・無償 競合サービスのレベル コンシューマー向け・企業向け   可用性のレベルを変更してどれだけのコストに影響があるかも考える必要がある  サービスの収益がXXX円だから、可用性0.</description>
    </item>
    
  </channel>
</rss>